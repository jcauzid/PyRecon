#/*##########################################################################
# Copyright (C) 2020-2021 The University of Lorraine - France
#
# This file is part of the PyRecon toolkit developed at the GeoRessources
# Laboratory of the University of Lorraine, France.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
#############################################################################*/

# -*- coding: utf-8 -*-
from os.path import join
from pkgs.SpectraPreProcessing import *
import numpy as np 
import pandas as pd
import os
import re
import json

'''


'''

class XRF(SpectraPreProcessing):

    def __init__(self, AdressFolder, Name):
        SpectraPreProcessing.__init__(self,AdressFolder)
        self.Name = Name



    def NameSpectrumColumns(self):
        '''Returns List of tuples containing the names of each column '''
        ColomnsName = ["KeV", "Main Range", "Low Range", "High Range", "Light Range"]
        Name = [self.NameColumn(SampleName = self.Name, ColomnName = ["_",w]) for w in ColomnsName]   
        return Name

    def Read_spectrum(self):
        ''' '''
        File = self.FilePath(self.Name)
        Sep = self.Separator(Extension = self.FileExtension(self.Name))
        #df = pd.read_csv(File, header = 0, sep = Sep, index_col = False,low_memory=False) index_col
        df = pd.read_csv(File, header = 0, sep = Sep, index_col = False,low_memory=False)
        return df 

        #def Read_spectrums(self):
        #    ''' Returns Data Frame that concatenate all spectrums in the folder. '''
        #    global df
        #    Names = self.NameFiles()
        #    DF = [XRF(self.AdressFolder, Names[i]).Read_spectrum() for i in range(len(Names))]
        #    df = DF[0][DF[0].columns[0]].to_frame()
        #    for i in range(len(DF)):
        #        df = df.join(DF[i][DF[i].columns[1::]])
        #    return df

        ######################################### Extruction of Spectrums #########################################
    def SelectXrfSamplesName(self):
        '''
        Return the sample names in Xrf spectrums 
                > DataFrame : is the imported csv file contining all xrf spectrums.
        '''
        DataFrame = self.Read_spectrum()
        id_sample = [name[0:name.find("(")] for name in DataFrame.columns[1::]]
        SamplesName = [item for item, count in collections.Counter(id_sample).items()]
        return SamplesName

    def SelectXrfColumnsName(self):
        '''
        Return list of extracted spectrums
            > DataFrame             : is the imported csv file contining all xrf spectrums.
            > XrfColumnsName        : the samples name generated by the function "SelectXrfColumnsName".

        '''
        DataFrame = self.Read_spectrum()
        SamplesName = self.SelectXrfSamplesName()
        NameColumns = list()
        for i in range(len(SamplesName)):
            NameColumns.append([name for name in DataFrame.columns.to_list() if name.startswith(SamplesName[i] + "(") ])

        return NameColumns

    def SelectXrfColumnsFilters(self):
        '''
        Ruturn the sample names in Xrf spectrums 
        '''
        DataFrame = self.Read_spectrum()
        SamplesName = self.SelectXrfSamplesName()
        NameFIlters = list()
        for i in range(len(SamplesName)):
            NameFIlters.append([name[len(SamplesName[i])::] for name in DataFrame.columns.to_list() if name.startswith(SamplesName[i]+ "(") ])
        return NameFIlters

    def NameXRFSpectrumColumns(self,SamplesName,ColumnsFilters):
        ''' 
        list tuples for naming each xrf spectrum
        '''
        listOfTuples = [tuple([SamplesName,"_",w]) for w in ColumnsFilters]
        return listOfTuples


    def ExtractSpectrums(self):
        '''
        Return Liste of all Spectrums 
        '''
        DataFrame = self.Read_spectrum()
        SamplesName =  self.SelectXrfSamplesName()
        ColumnsName = self.SelectXrfColumnsName()
        ColumnsFilters = self.SelectXrfColumnsFilters()
        Names = [self.NameXRFSpectrumColumns(SamplesName[i],ColumnsFilters[i]) for i in range(len(SamplesName))]
        first_column_name = pd.MultiIndex.from_tuples([("_","_","kev")])
        first_column = pd.DataFrame(DataFrame[DataFrame.columns[0]].values, columns=first_column_name)
        #first_column = pd.DataFrame(data = {("_","_","kev") : DataFrame[DataFrame.columns[0]]})
        #k = -1
        #DF2 = DataFrame[ColumnsName[k]]
        #DF          = DataFrame[ColumnsName[k]]
        #data2_      = [DF[DF.columns[j]].values for j in range(len(DF.columns)) ]
        #ColName2_   = pd.MultiIndex.from_tuples(Names[k])
        #print(np.transpose(data2_))
        #DF2_        = pd.DataFrame(np.transpose(data2_) , columns= ColName2_)
        #print(first_column.join(DF2_))
        #DF2_ = pd.DataFrame({Names[k][j] : DF[DF.columns[j]].to_list() for j in range(len(DF.columns))})
        #DF2_ = pd.DataFrame([DF[DF.columns[j]].values for j in ], columns=pd.MultiIndex.from_tuples([("_","_","kev")]))
        GrandeList = list()
        for k in range(len(Names)):
            DF          = DataFrame[ColumnsName[k]]
            data_       = [DF[DF.columns[j]].values for j in range(len(DF.columns)) ]
            ColName_    = pd.MultiIndex.from_tuples(Names[k])
            DF_         = pd.DataFrame(np.transpose(data_) , columns= ColName_)
            #DF_ = pd.DataFrame({Names[k][j] : DF[DF.columns[j]].to_list() for j in range(len(DF.columns))})
            DF__ = first_column.join(DF_)
            NaMe = DF__.columns.levels[0][0]
            if len(DF__.columns[1::]) == 1:
                df = pd.DataFrame({(NaMe,"_","(Low Range)") : [np.nan]*len(DF__), (NaMe,"_","(High Range)") : [np.nan]*len(DF__), (NaMe,"_","(Light Range)") : [np.nan]*len(DF__)})
                DF__ = DF__.join(df)
            elif len(DF__.columns[1::]) == 2:
                df = pd.DataFrame({(NaMe,"_","(High Range)") : [np.nan]*len(DF__), (NaMe,"_","(Light Range)") : [np.nan]*len(DF__)})
                DF__ = DF__.join(df)
            elif len(DF__.columns[1::]) == 3:
                df = pd.DataFrame({(NaMe,"_","(Light Range)") : [np.nan]*len(DF__)})
                DF__.join(df)
            GrandeList.append(DF__)
        return GrandeList


    def Save_UnitFlter_as_csv(self):
        ''' '''
        GL = self.ExtractSpectrums()
        ParamCol = GL[0][GL[0].columns[0]].to_frame()
        Main_DF = Low_DF = High_DF = Light_DF = ParamCol
        for k in range(len(GL)):
            Main_DF = Main_DF.join(GL[k][GL[k].columns[1]].to_frame())
            Low_DF = Low_DF.join(GL[k][GL[k].columns[2]].to_frame())
            High_DF = High_DF.join(GL[k][GL[k].columns[3]].to_frame())
            Light_DF = Light_DF.join(GL[k][GL[k].columns[-1]].to_frame())
    
        ALL_Filters = [Main_DF,Low_DF,High_DF,Light_DF]    
        FilesName = ["Main Range", "Low Range", "High Range", "Light Range"]
        path = [self.AdressFolder + os.path.sep + self.Name + os.path.sep + FilesName[i] for i in range(len(FilesName))]
        os.mkdir(self.AdressFolder + os.path.sep + self.Name)
        for i in range(len(path)):
            os.mkdir(path[i], mode = 0o777)
            ALL_Filters[i].to_csv(path[i] + os.path.sep + FilesName[i] + ".csv",index=False)
       


    def Save_UnitSpec_as_csv(self):
        path = self.AdressFolder + os.path.sep + self.Name
        os.mkdir(path, mode = 0o777)
        Names = self.SelectXrfSamplesName()
        GL = self.ExtractSpectrums()
        for i in range(len(Names)):
            GL[i].to_csv(path + os.path.sep + Names[i] + ".csv",index=False)


        
'''
NAMES = ["ELV-FABERT-01-10","ELV-FABERT-09-10","FABERT4-12-10","FABERT4-14-10_Revised","FABERT-21-10","ELV-FABERT-28-10",
                "ELV-FABERT-04-11","FABERT-16-11","ELV-FABERT-23-11","ELV-FABERT-25-11","ELV-FABERT-01-12","ELV44-FABERT-23-09"]

df = XRF(AdressFolder, NAMES[0]).Read_spectrum()
DF = df[df.columns[0]].to_frame()
for i in range(len(NAMES)): 
    df_ = XRF(AdressFolder, NAMES[i]).Read_spectrum()
    DF = DF.join(df_[df_.columns[1::]])
DF.to_csv(AdressFolder + os.path.sep  + "ALLXRF.csv",index=False)

obj = XRF(AdressFolder,Name)
obj.Save_UnitFlter_as_csv()
'''
